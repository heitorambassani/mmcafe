version: '3.8'

services:
  app:
    build: .
    container_name: upload-image-ia
    env_file:
      - .env
    ports:
      - "8083:8083"                # profile dev usa 8083
    depends_on:
      db:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy
    environment:
      SPRING_PROFILES_ACTIVE: dev  # usa application-dev.yml
      SERVER_PORT: 8083

      # apontar para os serviços do compose
      SPRING_DATASOURCE_URL: jdbc:postgresql://db:5432/upload_db
      SPRING_DATASOURCE_USERNAME: postgres
      SPRING_DATASOURCE_PASSWORD: postgres
      SPRING_RABBITMQ_HOST: rabbitmq
      SPRING_RABBITMQ_PORT: 5672
      SPRING_RABBITMQ_USERNAME: guest
      SPRING_RABBITMQ_PASSWORD: guest

      # herdadas do .env (mantidas aqui só para ficar explícito)
      CLOUDINARY_URL: ${CLOUDINARY_URL}
      GROQ_API_KEY: ${GROQ_API_KEY}
    volumes:
      - ~/.m2:/root/.m2:rw
    networks:
      - backend
    restart: unless-stopped

  db:
    image: postgres:15-alpine
    container_name: postgres-db
    environment:
      POSTGRES_DB: upload_db
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
    ports:
      - "5432:5432"
    volumes:
      - pgdata:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres -d upload_db"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - backend
    restart: unless-stopped

  rabbitmq:
    image: rabbitmq:3-management
    container_name: rabbitmq
    ports:
      - "5672:5672"
      - "15672:15672"
    healthcheck:
      test: ["CMD", "rabbitmq-diagnostics", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - backend
    restart: unless-stopped

volumes:
  pgdata:

networks:
  backend:
    driver: bridge
